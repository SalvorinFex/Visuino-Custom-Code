{
  "Version": "2",
  "Product": "Visuino Pro - Visual Arduino Programming",
  "Units": [
    {
      "Name": "__OpenWireRootUnit__",
      "*": [
        {
          "X": 800,
          "Name": "Arduino",
          "Instance": {
            "AnalogInput": {
              "*": [
                {
                  "+": "TArduinoESP8266AnalogInputChannel"
                }
              ]
            },
            "Serial": {
              "*": [
                {
                  "+": "TArduinoESP8266HardwareSerial"
                },
                {
                  "+": "TArduinoESP8266HardwareSerial1"
                }
              ]
            },
            "+": "TArduinoBoard",
            "AnalogInputReference": "Default",
            "Modules": {
              "*": [
                {
                  "+": "TArduinoESP8266WiFiModule"
                },
                {
                  "+": "TArduinoEEPROMModule"
                },
                {
                  "+": "TArduinoPWMConfigModule"
                },
                {
                  "+": "TArduinoESP8266ProcessorModule"
                }
              ]
            },
            "I2CChannels": {
              "*": [
                {
                  "+": "TArduinoESP8266_WeMos_D1_I2C"
                }
              ]
            },
            "Digital": {
              "*": [
                {
                  "+": "TArduinoBasicDigitalOpenDrainPWMSerial0InterruptChannel"
                },
                {
                  "+": "TArduinoBasicDigitalOpenDrainPWMSerial0InterruptChannel"
                },
                {
                  "+": "TArduinoBasicDigitalPWMInterruptChannel"
                },
                {
                  "+": "TArduinoBasicDigitalOpenDrainPWMI2C0InterruptChannel"
                },
                {
                  "+": "TArduinoBasicDigitalOpenDrainPWMI2C0InterruptChannel"
                },
                {
                  "+": "TArduinoBasicDigitalOpenDrainPWMInterruptChannel"
                },
                {
                  "+": "TArduinoBasicDigitalOpenDrainPWMInterruptChannel"
                },
                {
                  "+": "TArduinoBasicDigitalOpenDrainPWMSPI0InterruptChannel"
                },
                {
                  "+": "TArduinoBasicDigitalOpenDrainPWMSPI0InterruptChannel"
                },
                {
                  "+": "TArduinoBasicDigitalOpenDrainPWMSerial2SPI0InterruptChannel"
                },
                {
                  "+": "TArduinoBasicDigitalOpenDrainPWMSerial2InterruptChannel"
                }
              ]
            },
            "SPIChannels": {
              "*": [
                {
                  "+": "TArduinoSPI"
                }
              ]
            },
            "BoardType": "WeMos D1 \/ R2"
          },
          "Type": "Component",
          "Y": 256
        },
        {
          "X": 400,
          "Name": "CustomCode1",
          "Instance": {
            "ClockInputPin": {
              "SourcePins": [
                {
                  "ID": "__OpenWireRootUnit__.Repeat1.OutputPin"
                }
              ]
            },
            "Members": "\/\/ first visible ASCIIcharacter '!' is number 33:\r\nint thisByte = 33;\r\n\/\/ you can also write ASCII characters in single quotes.\r\n\/\/ for example, '!' is the same as 33, so you could also use this:\r\n\/\/ int thisByte = '!';",
            "OnInit": "\/*\r\n  ASCII table\r\n\r\n  Prints out byte values in all possible formats:\r\n  - as raw binary values\r\n  - as ASCII-encoded decimal, hex, octal, and binary values\r\n\r\n  For more on ASCII, see http:\/\/www.asciitable.com and http:\/\/en.wikipedia.org\/wiki\/ASCII\r\n\r\n  The circuit: No external hardware needed.\r\n\r\n  created 2006\r\n  by Nicholas Zambetti <http:\/\/www.zambetti.com>\r\n  modified 9 Apr 2012\r\n  by Tom Igoe\r\n\r\n  This example code is in the public domain.\r\n\r\n  http:\/\/www.arduino.cc\/en\/Tutorial\/ASCIITable\r\n*\/\r\n\r\n\r\n  \/\/Initialize serial and wait for port to open:\r\n  Serial.begin(9600);\r\n  while (!Serial) {\r\n    ; \/\/ wait for serial port to connect. Needed for native USB port only\r\n  }\r\n\r\n  \/\/ prints title with ending line break\r\n  Serial.println(\"ASCII Table ~ Character Map\");\r\n",
            "+": "TArduinoCustomCode",
            "Outputs": {
              "*": [
                {
                  "Name": "Text1",
                  "+": "TArduinoCustomCodeOutputTextElement"
                }
              ]
            },
            "OnExecute": "  \/\/ prints value unaltered, i.e. the raw binary version of the byte.\r\n  \/\/ The Serial Monitor interprets all bytes as ASCII, so 33, the first number,\r\n  \/\/ will show up as '!'\r\n  Serial.write(thisByte);\r\n\r\n  Serial.print(\", dec: \");\r\n  \/\/ prints value as string as an ASCII-encoded decimal (base 10).\r\n  \/\/ Decimal is the default format for Serial.print() and Serial.println(),\r\n  \/\/ so no modifier is needed:\r\n  Serial.print(thisByte);\r\n  \/\/ But you can declare the modifier for decimal if you want to.\r\n  \/\/ this also works if you uncomment it:\r\n\r\n  \/\/ Serial.print(thisByte, DEC);\r\n\r\n\r\n  Serial.print(\", hex: \");\r\n  \/\/ prints value as string in hexadecimal (base 16):\r\n  Serial.print(thisByte, HEX);\r\n\r\n  Serial.print(\", oct: \");\r\n  \/\/ prints value as string in octal (base 8);\r\n  Serial.print(thisByte, OCT);\r\n\r\n  Serial.print(\", bin: \");\r\n  \/\/ prints value as string in binary (base 2) also prints ending line break:\r\n  Serial.println(thisByte, BIN);\r\n\r\n  \/\/ if printed last visible character '~' or 126, stop:\r\n  if (thisByte == 126) {    \/\/ you could also use if (thisByte == '~') {\r\n    \/\/ This loop loops forever and does nothing\r\n    while (true) {\r\n      continue;\r\n    }\r\n  }\r\n  \/\/ go on to the next character\r\n  thisByte++;"
          },
          "Type": "Component",
          "Y": 336
        },
        {
          "X": 256,
          "Name": "Repeat1",
          "Instance": {
            "OutputPin": {
              "SinkPins": [
                {
                  "ID": "__OpenWireRootUnit__.CustomCode1.ClockInputPin"
                }
              ]
            },
            "+": "TArduinoRepeat"
          },
          "Type": "Component",
          "Y": 336
        }
      ],
      "Type": "Diagram",
      "Selection": [
        "CustomCode1"
      ]
    }
  ],
  "Content": "OpenWire Diagram"
}
